{
  "nextjsapi": {
    "prefix": "nextjsapi",
    "body": [
      "import type { NextApiRequest, NextApiResponse } from 'next'",
      "import jwt from 'jsonwebtoken'",
      "import prisma from '../../../prisma/client'",
      "import { Prisma } from '@prisma/client'",
      "",
      "",
      "type Data = {",
      "  message: string,",
      "  error?: any,",
      "} | {",
      "}",
      "",
      "",
      "export default async function handler(",
      "  req: NextApiRequest,",
      "  res: NextApiResponse<Data>",
      ") {",
      "",
      "  if (!req.cookies.token) return res.status(401).json({ message: 'Not authenticated.' })",
      "  const token = req.cookies.token",
      "  // @ts-ignore",
      "  const id = jwt.verify(token, process.env.JWT_SECRET)",
      "",
      "  if (!id) return res.status(401).json({ message: 'Not authenticated.' })",
      "  const user = await prisma.user.findUnique({ where: { id: id } })",
      "  if (!user) return res.status(401).json({ message: 'Not authenticated.' })",
      "",
      "  switch (req.method) {",
      "",
      "    case 'POST':",
      "      try {",
      "",
      "      } catch (e) {",
      "        if (e instanceof Prisma.PrismaClientKnownRequestError) {",
      "          if (e.code === 'P2002') {",
      "            return res.status(400).json({ message: 'Something went wrong', error: ''})",
      "          }",
      "        }",
      "        return res.status(500).json({ message: 'Something went wrong.', error: e})",
      "      }",
      "",
      "    case 'GET':",
      "      break",
      "",
      "    default:",
      "      return res.status(400).json({ message: 'That method is not supported.' })",
      "",
      "  }",
      "}",
      ""
    ],
    "description": "nextjsapi"
  },
  "nextjs page": {
    "prefix": "page",
    "description": "nextjs page",
    "body": [
      "type Props = {}",
      "export default function Page({}: Props) {",
      "  return (",
      "    <div>",
      "      <h1>Page</h1>",
      "    </div>",
      "  )",
      "}"
    ]
  }
}
